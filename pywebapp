#!/usr/bin/python3

import gi
import os
import webbrowser

# Seems like it's needed to be able to run webkit with compositor
os.environ["WEBKIT_DISABLE_DMABUF_RENDERER"] = "1"

gi.require_version('Gtk', '3.0')
gi.require_version('WebKit2', '4.0')

from gi.repository import Gtk, Gdk, WebKit2
from pathlib import Path

# Url for the webapp to load
title = "PyWebApp"
url = 'https://en.wikipedia.org'

# Window initial size
win_width = 1024
win_height = 768

# CSS entries to use for GTK
css = """
    window {
        background-color: #ff0000;
    }
    """

# CSS to append to the loaded website so you can adjust the websites' look
css_webview = """
    html body,
    html .mw-page-container {
        background: #ff0000;
    }
    """

# We load all links that are opened in new windows using the default browser
def create(view, action):
    uri = action.get_request().get_uri()
    webbrowser.open(uri, new=0, autoraise=True)

# On load we reveal the webview so loading doesn't just show a black window
def load(view, load_event):
    if (load_event == 3 and not revealer.get_reveal_child()):
        loading.stop()
        loading.set_visible(False)
        revealer.set_reveal_child(True)

# When navigation we check if the target url contains the main url and if not we redirect links to the default browser instead
def navigate(view, decision, decision_type):
    if (decision_type == 0):
        uri = decision.get_navigation_action().get_request().get_uri()
        if (uri.find(url) == -1 and uri != 'about:blank'):
            webbrowser.open(uri, new=0, autoraise=True)
            decision.ignore()

home = Path.home()
window = Gtk.Window()
revealer = Gtk.Revealer()

# Uncomment in case you want to use GTK dark theme variant
settings = Gtk.Settings.get_default()
settings.set_property("gtk-application-prefer-dark-theme", True)

window.set_title(title)
window.resize(win_width, win_height)
window.connect('delete-event', Gtk.main_quit)

css_provider = Gtk.CssProvider()
css_provider.load_from_data(css.encode())
context = Gtk.StyleContext()
screen = Gdk.Screen.get_default()
context.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

webview = WebKit2.WebView()
webview.load_uri(url)
webview.connect("create", create)
webview.connect("load-changed", load)
webview.connect("decide-policy", navigate)

# Comment out if you want to have smooth scrolling activated
webview.get_settings().set_enable_smooth_scrolling(False)

# This forces cookies to be stored so session is kept alive
webview.get_context().get_cookie_manager().set_persistent_storage(
        home.as_posix() + '/.local/share/' + os.path.basename(__file__) + '/cookies', WebKit2.CookiePersistentStorage.SQLITE
    )

style = WebKit2.UserStyleSheet.new(css_webview, 0, 1, None, None)
webview.get_user_content_manager().add_style_sheet(style)

revealer.set_transition_type(1)
revealer.add(webview)

loading = Gtk.Spinner.new()
loading.set_size_request(50, 50)
loading.set_valign(Gtk.Align.END)
loading.start()

box = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
box.pack_start(loading, expand=True, fill=True, padding=0)
box.pack_start(revealer, expand=True, fill=True, padding=0)

window.add(box)
window.show_all()

Gtk.main()
